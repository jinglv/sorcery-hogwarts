{"remainingRequest":"/Users/lvjing/web-project/sorcery-hogwarts/sorcery-front/node_modules/babel-loader/lib/index.js!/Users/lvjing/web-project/sorcery-hogwarts/sorcery-front/src/api/http.js","dependencies":[{"path":"/Users/lvjing/web-project/sorcery-hogwarts/sorcery-front/src/api/http.js","mtime":1663227236661},{"path":"/Users/lvjing/web-project/sorcery-hogwarts/sorcery-front/node_modules/cache-loader/dist/cjs.js","mtime":1663752628994},{"path":"/Users/lvjing/web-project/sorcery-hogwarts/sorcery-front/node_modules/babel-loader/lib/index.js","mtime":1663752630001}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tICdlbGVtZW50LXVpJzsKaW1wb3J0IHJvdXRlciBmcm9tICcuLi9yb3V0ZXInOwp2YXIgcm9vdCA9IHByb2Nlc3MuZW52LlZVRV9BUFBfVVJMOwp2YXIgaW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoewogIGhlYWRlcnM6IHsKICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicKICB9LAogIC8vIOWfuuehgOeahHVybAogIGJhc2VVUkw6IHJvb3QKfSk7IC8vIExvZ2lu5Lit55qEbG9jYWxTdG9yYWdl5a2Y5YKodG9rZW4KLy8g5oum5oiq5Zmo77yM5oum5oiqcmVxdWVzdOivt+axgu+8jOWmguaenOacrOWcsOeahGxvY2FsU3RvcmFnZeWtmOWCqOS6hnRva2Vu77yM5YiZ5bCGdG9rZW7lrZjlhaXliLDlj5HpgIHor7fmsYLnmoR0b2tlbuS4rQoKaW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlcXVlc3QudXNlKGZ1bmN0aW9uIChjb25maWcpIHsKICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJykpIHsKICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vblsndG9rZW4nXSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpOwogIH0KCiAgcmV0dXJuIGNvbmZpZzsKfSk7CnZhciBtZXNzYWdlSW5zdGFuY2UgPSBudWxsOyAvLyDmi6bmiKrlmajvvIzmi6bmiKpyZXNwb25zZeWTjeW6lO+8jOWvuemUmeivr+S/oeaBr++8jOi/m+ihjOW8ueeql+aPkOekugoKaW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShmdW5jdGlvbiAocmVzKSB7CiAgLy8g5a+56ZSZ6K+v55qE6K+35rGC57uT5p6c57uf5LiA5aSE55CG5bm25LiU5pyJ5L+h5oGv5o+Q56S6CiAgaWYgKHJlcy5kYXRhLnJlc3VsdENvZGUgPT09IDEpIHsKICAgIHJldHVybiByZXM7CiAgfSBlbHNlIHsKICAgIC8vIOWmguaenOmhtemdouW3sue7j+WtmOWcqOaPkOekuuS/oeaBr++8jOWImeWFiOWFs+mXre+8jOWGjeaPkOekugogICAgaWYgKG1lc3NhZ2VJbnN0YW5jZSkgewogICAgICBtZXNzYWdlSW5zdGFuY2UuY2xvc2UoKTsKICAgIH0gLy8g6YeN5YaZTWVzc2FnZe+8jOe7n+S4gOaPkOekuuS/oeaBr+WkhOeQhgoKCiAgICBtZXNzYWdlSW5zdGFuY2UgPSBNZXNzYWdlKHsKICAgICAgdHlwZTogJ2Vycm9yJywKICAgICAgbWVzc2FnZTogcmVzLmRhdGEubWVzc2FnZSwKICAgICAgLy8g5o+Q56S65L+h5oGv77yM5bGF5Lit5pi+56S6CiAgICAgIGNlbnRlcjogdHJ1ZQogICAgfSk7CiAgICByZXR1cm4gcmVzOwogIH0KfSwgLy8g5o6l5Y+j5ZON5bqU5byC5bi45aSE55CGCmZ1bmN0aW9uIChlcnJvcikgewogIHZhciByZXNwb25zZSA9IGVycm9yLnJlc3BvbnNlOyAvLyDlpITnkIbov5Tlm57lgLxodHRwIHN0YXR1cyBjb2Rl5Li6NDAx5aSE55CGCgogIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSkgewogICAgaWYgKG1lc3NhZ2VJbnN0YW5jZSkgewogICAgICBtZXNzYWdlSW5zdGFuY2UuY2xvc2UoKTsKICAgIH0KCiAgICBtZXNzYWdlSW5zdGFuY2UgPSBNZXNzYWdlKHsKICAgICAgdHlwZTogJ2Vycm9yJywKICAgICAgbWVzc2FnZTogcmVzcG9uc2UuZGF0YS5tZXNzYWdlLAogICAgICBjZW50ZXI6IHRydWUKICAgIH0pOyAvLyDpobXpnaLplJnor6/ot6/nlLHot7PovawKCiAgICByb3V0ZXIucmVwbGFjZSh7CiAgICAgIHBhdGg6ICcvJywKICAgICAgcXVlcnk6IHsKICAgICAgICByZWRpcmVjdDogcm91dGVyLmN1cnJlbnRSb3V0ZS5mdWxsUGF0aAogICAgICB9CiAgICB9KTsKICB9CgogIHJldHVybiByZXNwb25zZTsKfSk7CmV4cG9ydCBkZWZhdWx0IGluc3RhbmNlOw=="},{"version":3,"sources":["/Users/lvjing/web-project/sorcery-hogwarts/sorcery-front/src/api/http.js"],"names":["axios","Message","router","root","process","env","VUE_APP_URL","instance","create","headers","baseURL","interceptors","request","use","config","localStorage","getItem","common","messageInstance","response","res","data","resultCode","close","type","message","center","error","status","replace","path","query","redirect","currentRoute","fullPath"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAAzB;AACA,IAAMC,QAAQ,GAAGP,KAAK,CAACQ,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX,GADiB;AAI1B;AACAC,EAAAA,OAAO,EAAEP;AALiB,CAAb,CAAjB,C,CAOA;AACA;;AACAI,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,UAAAC,MAAM,EAAI;AACxC,MAAIC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAmC;AAC/BF,IAAAA,MAAM,CAACL,OAAP,CAAeQ,MAAf,CAAsB,OAAtB,IAAiCF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAjC;AACH;;AACD,SAAOF,MAAP;AACH,CALD;AAMA,IAAII,eAAe,GAAG,IAAtB,C,CACA;;AACAX,QAAQ,CAACI,YAAT,CAAsBQ,QAAtB,CAA+BN,GAA/B,CAAmC,UAAAO,GAAG,EAAI;AAClC;AACA,MAAIA,GAAG,CAACC,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC3B,WAAOF,GAAP;AACH,GAFD,MAEO;AACH;AACA,QAAIF,eAAJ,EAAqB;AACjBA,MAAAA,eAAe,CAACK,KAAhB;AACH,KAJE,CAKH;;;AACAL,IAAAA,eAAe,GAAGjB,OAAO,CAAC;AACtBuB,MAAAA,IAAI,EAAE,OADgB;AAEtBC,MAAAA,OAAO,EAAEL,GAAG,CAACC,IAAJ,CAASI,OAFI;AAGtB;AACAC,MAAAA,MAAM,EAAE;AAJc,KAAD,CAAzB;AAMA,WAAON,GAAP;AACH;AACJ,CAlBL,EAmBI;AACA,UAAAO,KAAK,EAAI;AAAA,MACER,QADF,GACcQ,KADd,CACER,QADF,EAEL;;AACA,MAAIA,QAAQ,CAACS,MAAT,KAAoB,GAAxB,EAA6B;AACzB,QAAIV,eAAJ,EAAqB;AACjBA,MAAAA,eAAe,CAACK,KAAhB;AACH;;AACDL,IAAAA,eAAe,GAAGjB,OAAO,CAAC;AACtBuB,MAAAA,IAAI,EAAE,OADgB;AAEtBC,MAAAA,OAAO,EAAEN,QAAQ,CAACE,IAAT,CAAcI,OAFD;AAGtBC,MAAAA,MAAM,EAAE;AAHc,KAAD,CAAzB,CAJyB,CASzB;;AACAxB,IAAAA,MAAM,CAAC2B,OAAP,CAAe;AACXC,MAAAA,IAAI,EAAE,GADK;AAEXC,MAAAA,KAAK,EAAE;AACHC,QAAAA,QAAQ,EAAE9B,MAAM,CAAC+B,YAAP,CAAoBC;AAD3B;AAFI,KAAf;AAMH;;AACD,SAAOf,QAAP;AACH,CAzCL;AA2CA,eAAeZ,QAAf","sourcesContent":["import axios from 'axios'\nimport {Message} from 'element-ui'\nimport router from '../router'\n\nconst root = process.env.VUE_APP_URL\nconst instance = axios.create({\n    headers: {\n        'Content-Type': 'application/json',\n    },\n    // 基础的url\n    baseURL: root\n});\n// Login中的localStorage存储token\n// 拦截器，拦截request请求，如果本地的localStorage存储了token，则将token存入到发送请求的token中\ninstance.interceptors.request.use(config => {\n    if (localStorage.getItem('token')) {\n        config.headers.common['token'] = localStorage.getItem('token')\n    }\n    return config\n})\nlet messageInstance = null\n// 拦截器，拦截response响应，对错误信息，进行弹窗提示\ninstance.interceptors.response.use(res => {\n        // 对错误的请求结果统一处理并且有信息提示\n        if (res.data.resultCode === 1) {\n            return res;\n        } else {\n            // 如果页面已经存在提示信息，则先关闭，再提示\n            if (messageInstance) {\n                messageInstance.close();\n            }\n            // 重写Message，统一提示信息处理\n            messageInstance = Message({\n                type: 'error',\n                message: res.data.message,\n                // 提示信息，居中显示\n                center: true\n            })\n            return res;\n        }\n    },\n    // 接口响应异常处理\n    error => {\n        const {response} = error\n        // 处理返回值http status code为401处理\n        if (response.status === 401) {\n            if (messageInstance) {\n                messageInstance.close();\n            }\n            messageInstance = Message({\n                type: 'error',\n                message: response.data.message,\n                center: true\n            })\n            // 页面错误路由跳转\n            router.replace({\n                path: '/',\n                query: {\n                    redirect: router.currentRoute.fullPath\n                }\n            })\n        }\n        return response;\n    }\n)\nexport default instance\n"]}]}